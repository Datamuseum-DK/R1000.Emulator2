
set -e
R1K_TESTNAME=`basename $0 .sh`

R1K_WORKDIR=`make workdir`

R1K_PFX=${R1K_WORKDIR}/_${R1K_TESTNAME}

rm -rf ${R1K_PFX}
mkdir -p ${R1K_PFX}

R1K_CLIFILE=${R1K_PFX}/_.cli

mandatory_patches() {

	# These mandatory patches compensate for optimized hardware

	# Skip IOC test "EEPROM CHECKSUM"
	cli firmware patch IOC_EEPROM 0x01e4 0x4e 0xf9 0x80 0x00 0x02 0x1a

	# Skip IOC test "Memory parity"
	cli firmware patch IOC_EEPROM 0x0568 0x4e 0xf9 0x80 0x00 0x07 0xd0

	# Skip IOC test "I/O bus control"
	cli firmware patch IOC_EEPROM 0x07f4 0x4e 0xf9 0x80 0x00 0x09 0xb2

	# Skip IOC test "I/O bus map parity"
	cli firmware patch IOC_EEPROM 0x09da 0x4e 0xf9 0x80 0x00 0x0a 0x4a

	# Skip IOC test "I/O bus transactions"
	cli firmware patch IOC_EEPROM 0x0a74 0x4e 0xf9 0x80 0x00 0x0b 0x8a

	# Skip IOC test "PIT  (=> DUART)"
	cli firmware patch IOC_EEPROM 0x0ba2 0x4e 0xf9 0x80 0x00 0x0b 0xf2

	# Skip IOC test "RESHA VME sub-tests"
	cli firmware patch IOC_EEPROM 0x1170 0x4e 0xf9 0x80 0x00 0x11 0x7c

	# Skip IOC test "RESHA LANCE sub-tests"
	cli firmware patch IOC_EEPROM 0x117c 0x4e 0xf9 0x80 0x00 0x11 0x88

	# Skip IOC test "Local interrupts (vector 0x50)"
	cli firmware patch IOC_EEPROM 0x11dc 0x4e 0xf9 0x80 0x00 0x11 0xfc

	# Skip IOC test "Local interrupts (vector 0x51)"
	cli firmware patch IOC_EEPROM 0x127a 0x4e 0xf9 0x80 0x00 0x12 0x98

	# Skip IOC test "Local interrupts (vector 0x52)"
	cli firmware patch IOC_EEPROM 0x1358 0x4e 0xf9 0x80 0x00 0x14 0x70

	# Skip IOC test "Illegal reference protection"
	cli firmware patch IOC_EEPROM 0x1502 0x4e 0xf9 0x80 0x00 0x15 0xce

	# Skip IOC test "I/O bus parity"
	cli firmware patch IOC_EEPROM 0x15f2 0x4e 0xf9 0x80 0x00 0x16 0x6c

	# Skip IOC test "I/O bus spurious interrupts"
	cli firmware patch IOC_EEPROM 0x169c 0x4e 0xf9 0x80 0x00 0x16 0xd8

	# Skip IOC test "Temperature sensors"
	cli firmware patch IOC_EEPROM 0x1700 0x4e 0xf9 0x80 0x00 0x17 0x46

	# Skip IOC test "IOC diagnostic processor"
	cli firmware patch IOC_EEPROM 0x1774 0x4e 0xf9 0x80 0x00 0x17 0xf8

	# Skip IOC test "Clock margining"
	cli firmware patch IOC_EEPROM 0x1880 0x4e 0xf9 0x80 0x00 0x19 0x7c

	# Patch ucode halt at 0x29f2 "ECC_EVENT_NOT_TAKEN" to <return>
	cli dfs patch DIAG.M200_UCODE 0x5c240 \
		0xf8 0xf8 0xfc 0xec 0xc8 0xd8 0xc8 0xf8 \
		0xf9 0xf8 0xfd 0xe8 0xe8 0xd8 0xcc 0xf8 \
		0xc2 0x52 0x78 0x78 0x40 0x63 0x4c 0x4c \
		0x10 0x50 0x20 0x10 0x30 0x00 0x30 0x20

	# Patch ucode halt at 0x29f4 "ECC_ERROR" to <return>
	cli dfs patch DIAG.M200_UCODE 0x5c280 \
		0xf8 0xf8 0xfc 0xec 0xc8 0xd8 0xc8 0xf8 \
		0xf9 0xf8 0xfd 0xe8 0xe8 0xd8 0xcc 0xf8 \
		0xc2 0x52 0x78 0x78 0x40 0x63 0x4c 0x4c \
		0x10 0x50 0x20 0x10 0x30 0x00 0x30 0x20
}

speedup_patches() {

	# These optional patches speed things up a little bit, but eliminates
	# tons of output when tracing.

	# Skip IOC test "512k RAM Test (dword based)"
	cli firmware patch IOC_EEPROM 0x03a4 0x4e 0xf9 0x80 0x00 0x04 0xf8

	# Skip IOC test "512k RAM Test (byte steering)"
	cli firmware patch IOC_EEPROM 0x04f8 0x4e 0xf9 0x80 0x00 0x05 0x46

	# Skip IOC test "Modem DUART channel"
	cli firmware patch IOC_EEPROM 0x0c1a 0x4e 0xf9 0x80 0x00 0x0d 0x20

	# Skip IOC test "Diagnostic DUART channel"
	cli firmware patch IOC_EEPROM 0x0d4e 0x4e 0xf9 0x80 0x00 0x0d 0xd6

	# Skip IOC test "Clock / Calendar"
	cli firmware patch IOC_EEPROM 0x0dfc 0x4e 0xf9 0x80 0x00 0x0e 0xc4

	# Skip IOC test "RESHA EEProm Interface ..."
	cli firmware patch IOC_EEPROM 0x0fa0 0x4e 0xf9 0x80 0x00 0x0f 0xda

	# Skip IOC test "Power margining"
	cli firmware patch IOC_EEPROM 0x181c 0x4e 0xf9 0x80 0x00 0x18 0x5c

	# Skip IOC test "final check"
	cli firmware patch IOC_EEPROM 0x1982 0x4e 0xf9 0x80 0x00 0x19 0x92

	# Speed up IOC UART loops
	#	80000060 20 3c 00 00 82 35          MOVE.L  #0x00008235,D0
	#	80000060 20 3c 00 00 00 0a          MOVE.L  #0x0000000a,D0
	cli firmware patch IOC_EEPROM 0x0062 0x00 0x00 0x00 0x0a
	#	800000fe 20 3c 00 01 04 6a          MOVE.L  #0x0001046a,D0
	#	800000fe 20 3c 00 00 00 0a          MOVE.L  #0x0000000a,D0
	cli firmware patch IOC_EEPROM 0x0100 0x00 0x00 0x00 0x0a
	#	80000132 20 3c 00 00 82 35          MOVE.L  #0x00008235,D0
	#	80000132 20 3c 00 00 00 0a          MOVE.L  #0x0000000a,D0
	cli firmware patch IOC_EEPROM 0x0134 0x00 0x00 0x00 0x0a
	#	80000338 20 3c 00 00 82 35          MOVE.L  #0x00008235,D0
	#	80000338 20 3c 00 00 00 0a          MOVE.L  #0x0000000a,D0
	cli firmware patch IOC_EEPROM 0x033a 0x00 0x00 0x00 0x0a
	#	80000348 20 3c 00 00 82 35          MOVE.L  #0x00008235,D0
	#	80000348 20 3c 00 00 00 0a          MOVE.L  #0x0000000a,D0
	cli firmware patch IOC_EEPROM 0x034a 0x00 0x00 0x00 0x0a

	# NB: patching RESHA_EEPROM causes "Warning: Detected Checksum Error"

	# Resha UART loop
	#	00077176 24 3c 00 0b 42 0f          MOVE.L  #0x000b420f,D2
	#	00077176 24 3c 00 00 00 0a          MOVE.L  #0x0000000a,D2
	cli firmware patch RESHA_EEPROM 0x717a 0x00 0x00 0x00 0x0a

	# Resha SCSI loops
	#	00074588 20 3c 00 00 05 00          MOVE.L  #0x00000500,D0
	#	00074588 20 3c 00 00 00 0a          MOVE.L  #0x0000000a,D0
	cli firmware patch RESHA_EEPROM 0x458a 0x00 0x00 0x00 0x0a
	#	00077388 20 3c 00 00 05 00          MOVE.L  #0x00000500,D0
	#	00077388 20 3c 00 00 00 0a          MOVE.L  #0x0000000a,D0
	cli firmware patch RESHA_EEPROM 0x738a 0x00 0x00 0x00 0x0a

	# Poll experiment completion four times as often
	#	000193c4 48 78 00 4e                PEA.L       0x4e
	#	000193c4 48 78 00 14                PEA.L       0x14
	cli dfs patch FS_0.M200 0x93c6 0x00 0x14

	# Speed up DELAY_LOOP(D1)
	# 	00005d16 20 3c 00 00 05 00          MOVE.L  #0x00000500,D0
	# 	00005d16 20 3c 00 00 00 20          MOVE.L  #0x00000020,D0
	cli dfs patch KERNEL_0.M200 0x00005d18 0x00 0x00 0x00 0x20

	# Speed up INIT_KERNEL_10_VME
	#	000066d0 20 3c 00 23 7c 4d     MOVE.L  #0x00237c4d,D0
	#	000066d0 20 3c 00 00 00 20     MOVE.L  #0x00000020,D0
	cli dfs patch KERNEL_0.M200 0x000066d2 0x00 0x00 0x00 0x20

	# Speed up INIT_KERNEL_07
	#	00009af6 20 3c 00 07 ff ff          MOVE.L  #0x0007ffff,D0
	#	00009af6 20 3c 00 00 00 20          MOVE.L  #0x00000020,D0
	cli dfs patch KERNEL_0.M200 0x00009af8 0x00 0x00 0x00 0x20
	#	00009b56 30 3c 7f ff                MOVE.W  #0x7fff,D0
	#	00009b56 30 3c 00 20                MOVE.W  #0x0020,D0
	cli dfs patch KERNEL_0.M200 0x00009b58 0x00 0x20

	# Speed up SCSI operations
	#	00009818 20 3c 00 03 ff ff          MOVE.L  #0x0003ffff,D0
	#	00009818 20 3c 00 00 04 00          MOVE.L  #0x00000400,D0
	cli dfs patch KERNEL_0.M200 0x0000981a 0x00 0x00 0x04 0x00

	# Speed up microcode loading
	#	0002122c 2e bc 00 00 98 96          MOVE.L      #0x9896,(A7)
	#	0002122c 2e bc 00 00 44 aa          MOVE.L      #0x44aa,(A7)
	cli dfs patch LOADER.M200 0x122e 0x00 0x00 0x44 0xaa

	# Reduce post-copyright delay
	#	0002081e 2e bc 00 02 fa ee          MOVE.L      #0x2faee,(A7)
	#	0002081e 2e bc 00 00 07 a1          MOVE.L      #0x007a1,(A7)
	cli dfs patch LOADER.M200 0x0820 0x00 0x00 0x07 0xa1

	# Reduce poll-rate 2s -> .1s
	# (Do this slow working systems down ?)
	#	00020c3e 2f 3c 00 00 98 96          MOVE.L      #0x9896,-(A7)
	#	00020c3e 2f 3c 00 00 0f 42          MOVE.L      #0x0f42,-(A7)
	cli dfs patch MONITOR.M200 0x0c40 0x00 0x00 0x0f 0x42
}

config_patches() {

	# Set the cluster id to 408459 (= PAM's machine)
	cli firmware patch IOC_EEPROM 0x7e84 0x00 0x06 0x3b 0x8b

	# These patches adjust the configuration so we do not have to run
	# CEDIT all the time.

	# Allow operator to enter CLI immediately [N] ? y
	# cli dfs patch STANDARD.M200_CONFIG 0x3 0x1

	# Allow operator to enter CLI prior to starting the cluster [N] ? y
	# cli dfs patch STANDARD.M200_CONFIG 0x5 0x1

	# Wait for remote debugging on kernel crashes [Y] ? n
	cli dfs patch STANDARD.M200_CONFIG 0x2a 0x0

	# Call Rational on kernel crash [Y] ? n
	cli dfs patch STANDARD.M200_CONFIG 0x2d 0x0

	# Single MEM32 board
	cli dfs patch HARDWARE.M200_CONFIG 0x05 0x0

	# Enable kernel debugger
	# cli dfs patch STANDARD.M200_CONFIG 0xbc 0x52
	# cli dfs patch STANDARD.M200_CONFIG 0xb9 0x30
}

convenience_patches() {

	# Entirely a matter of taste.

	# Dont use "CR ESC [ 2 K" to hide experiment names
	cli dfs patch FS_0.M200 0x8fb7 0x20
	cli dfs patch FS_0.M200 0x8fbd 0x20
	cli dfs patch FS_0.M200 0x827e 0x40 0x0a 0x0d

}

standard_patches() {

	mandatory_patches
	speedup_patches
	config_patches
	convenience_patches
}

cli() {
	echo "$*" >> ${R1K_CLIFILE}
}

cli '# => Standard prefix'

make diskcli | while read i
do
	cli "$i"
done

cli 'console >' ${R1K_PFX}/_.console
cli 'modem >' ${R1K_PFX}/_.modem
cli 'console telnet localhost:1400'
cli 'modem telnet localhost:1416'

standard_patches

sc_boards() {
	cli r1000 launch
	cli diproc dummy mem0
	cli diproc dummy -TIMEOUT mem1
	cli diproc dummy -TIMEOUT mem2
	cli diproc dummy -TIMEOUT mem3
	cli diproc dummy typ
	cli diproc dummy val
	cli diproc dummy ioc
	cli diproc dummy seq
	cli diproc dummy fiu
	cli 'r1000 watchdog -dont_bite 2' 
}

cli_prompt() {
	# cli 'r1000 trace DI*PROC 0x14'
	cli 'trace +console'
	cli 'trace +diagbus'
	cli "iop syscall"  
	# cli "r1000 trace DUIRG 1"

	cli 'r1000 wait .00001'
	cli '# => cli_prompt'
	cli iop reset
	cli 'console match expect "Boot from (Tn or Dn)  [D0] : "'
	cli 'console << ""'
	cli 'console match expect "Kernel program (0,1,2) [0] : "'
	cli 'console << ""'
	cli 'console match expect "File system    (0,1,2) [0] : "'
	cli 'console << ""'
	cli 'console match expect "User program   (0,1,2) [0] : "'
	cli 'console << ""'
	cli 'console match expect "Enter option [enter CLI] : "'
	cli 'console << "1"'
	cli 'console match expect "CLI>"'
}

fru_prompt() {
	cli_prompt
	cli '# => fru_prompt'
	cli 'console << "x fru"'
	cli 'console match expect "Please enter option : "'
	for i in $*
	do
		cli "console << $i"
		cli 'console match expect " : "'
	done
}

run_with_cli() {
	cli 'r1000 wait 1e-6'
	cli r1000 rate
	./r1000sim \
		-T ${R1K_PFX}/_.trace \
		"include ${R1K_CLIFILE}" 2>&1 | tee ${R1K_PFX}/_.log
}

run() {
	cli 'r1000 wait 1e-6'
	cli r1000 rate
	cli exit
	echo "exit" | ./r1000sim \
		-T ${R1K_PFX}/_ \
		"include ${R1K_CLIFILE}" 2>&1 | tee ${R1K_PFX}/_.log
}

single() {
	single_brd=$1
	shift

        if [ "x${single_brd}" = "xmem0" ] ; then
		single_suff="m32"
		cli 'r1000 trace DFSM 1'
	else
		single_suff="${single_brd}"
		cli 'r1000 trace DUIRG 1'
	fi


	if [ "x$1" == "x" ] ; then
		set TEST_WCS_ADDRESS
	fi

	#cli 'r1000 trace DI*PROC 0x14'

	cli 'r1000 quota add 60'
	cli 'r1000 quota exit'

        for EXP in $*
	do
		cli "dfs read ${EXP}.${single_suff} ${R1K_PFX}.exp"
		cli "diproc experiment ${single_brd} ${R1K_PFX}.exp"
		cli "diproc wait ${single_brd}"
		cli "diproc status ${single_brd}"
	done

	run
}
